[
    {
        "id": "ws1",
        "title": "最大公约数之和",
        "content": "下列程序想要求解整数n的所有约数两两之间最大公约\n数的和对10007求余后的值，试补全程序。（第一空2 分，其余3 分）\n\n\n举例来说，4的所有约数是1,2,4。1和2的最大公约数为1；2和4的最大公约\n数为2；1和4的最大公约数为1。于是答案为1 + 2 + 1 = 4。\n\n要求 getDivisor 函数的复杂度为$O(\\sqrt{n})$，gcd 函数的复杂度为$O(\\log\\max(a,b))$",
        "answer": "(1) i \\* i\n(2) n / i\n(3) return a\n(4) a % b\n(5) ans + gcd(a[i], a[j])",
        "explain": "思路：了解gcd的递归求解公式，也就是gcd(a, b) = (b==0)?a:gcd(b, a % b)\n(1) i \\* i 这里需要考虑的是防止约数重复计算，所以仅计算小于等于n^{1/2}的约数\n(2) n / i 这里是将大于n^{1/2}的约数也加入到队列，需要排除n / i == i的情况，也就是n / i == n^{1/2}\n(3) return a 这个套用gcd公式即可\n(4) a % b 这个套用gcd公式即可\n(5) ans + gcd(a[i], a[j]) 首先要注意的是外层循环j的起始值，然后ans就是简单的累加求和",
        "code": "#include <iostream> \nusing namespace std; \nconst int N = 110000, P = 10007; \nint n; \nint a[N], len; \nint ans; \nvoid getDivisor() { \n    len = 0; \n    for (int i = 1; ____(1)____ <= n; ++i) \n    if (n % i == 0) { \n        a[++len] = i; \n        if (____(2)____ != i) a[++len] = n / i; \n    } \n} \nint gcd(int a, int b) { \n    if (b == 0) { \n        ____(3)____; \n    } \n    return gcd(b, ____(4)____ ); \n} \nint main() { \n    cin >> n;  \n    getDivisor(); \n    ans = 0; \n    for (int i = 1; i <= len; ++i) { \n        for (int j = i + 1; j <= len; ++j) { \n            ans = (____(5)____) % P; \n        } \n    } \n    cout << ans << endl;\n    return 0;\n}"
    },
    {
        "id": "ws2",
        "title": "静态双链表",
        "content": "对于一个1到n的排列P（即1到n中每一个数在P中出现了恰好一次），令q_i为\n第i个位置之后第一个比Pi值更大的位置，如果不存在这样的位置，则q_i = n +\n1。\n举例来说，如果n = 5且P为1 5 4 2 3，则q为2 6 6 5 6。\n下列程序读入了排列P，使用双向链表求解了答案。试补全程序。（第二空\n2 分，其余3 分）\n数据范围 1 <= n <= 10^5^。",
        "answer": "(1) a[x] = i\n(2) i + 1\n(3) R[a[i]]\n(4) a[i]\n(5) R[i]",
        "explain": "思路：了解双向链表的应用，理解双向链表的优势，也就是插入与删除元素非常方便。\nL[]表示左边第一个元素的位置，R[]表示右边第一个元素的位置，a[]存储元素的位置。\n(1) a[x] = i 表示x放在第i位上，这个的作用在于定义删除的顺序\n(2) i + 1 标准的双向链表初始化，这个可以参考L[]的写法\n(3) R[a[i]] 标准的双向链表删除操作，双向链表的一个性质就是被删除的L,R值将不会改变。然后在本题中我们考虑这样一个事情，我们每一次删除的元素都是当前链表的最小值。这样可以保证其R值为第一个比当前值大的元素的位置。这样迭代上述操作，就可以确定每一个位置的第一个比当前值大的元素的位置了。\n(4) a[i] 标准的双向链表删除操作，同上\n(5) R[i] 同上",
        "code": "#include <iostream>\nusing namespace std;\nconst int N = 100010;\nint n;\nint L[N], R[N], a[N];\nint main()\n{\n    cin >> n;\n    for (int i = 1; i <= n; ++i) {\n        int x;\n        cin >> x;\n        ____(1)____ ;\n    }\n    for (int i = 1; i <= n; ++i) {\n        R[i] = ____(2)____ ;\n        L[i] = i - 1;\n    }\n    for (int i = 1; i <= n; ++i) {\n        L[ ____(3)____ ] = L[a[i]];\n        R[L[a[i]]] = R[ ____(4)____ ];\n    }\n    for (int i = 1; i <= n; ++i) {\n        cout << ____(5)____ << \" \";\n    }\n    cout << endl;\n    return 0;\n}"
    },
    {
        "id": "ws3",
        "title": "快速幂",
        "content": "请完善下面的程序，该程序使用分治法求x^p^ mod m 的值。（第一空2分，其余3分）\n\n 输入：三个不超过10000 的正整数x，p，m。\n\n 输出：x^p^ mod m 的值。\n提示：若 p 为偶数，$x^p=(x^2)^{p/2}$；若p 为奇数，$x^p=x\\*(x^2)^{p/2}$。",
        "answer": "(1) 1\n(2) p>0或p!=0或p\n(3) result \\* x % m\n(4) x \\* x % m\n(5) result",
        "explain": "思路：快速幂的基本思路是\n以求x的p次方来介绍：\n首先把p转换成二进制数\n该二进制数第i位的权为  $2^i-1$ .\n比如 : 11的二进制是1011\n11 = 2³×1 + 2²×0 + 2¹×1 + 2º×1\n所以假设我们要求$x^p$，那么其实p是可以拆成二进制的，该二进制数第i位的权为$2^{i-1}$，例如当b==11时\n$x^{11}=x^(2^0+2^1+2^3)$\n然后按照分治的思想，若 p 为偶数，$x^p$变成底数平方，指数减半的问题$(x^2)^{p/2}$；\n若p 为奇数，将结果乘以底数，再变成底数平方，指数减半的问题$x\\*(x^2)^{(p-1)/2}$。\n(1) 1 关键这里是1，不是0。因为任何数乘0都得0\n(2) p>0或p!=0或p 判断问题是否可以继续分，也就是指数是否为0\n(3) result \\* x % m 将结果乘以底数，需要注意要除于m\n(4) x \\* x % m 底数平方，需要注意要除于m\n(5) result 输出结果",
        "code": "#include <iostream>\nusing namespace std;\nint x, p, m, i, result;\nint main()\n{\n    cin >> x >> p >> m;\n    result = ____(1)____ ;\n    while ( ____(2)____ ) {\n        if (p % 2 == 1)\n            result = ____(3)____ ;\n        p /= 2;\n        x = ____(4)____ ;\n    }\n    cout << ____(5)____ << endl;\n    return 0;\n}"
    },
    {
        "id": "ws4",
        "title": "切割绳子",
        "content": "有 n 条绳子，每条绳子的长度已知且均为正整数。绳子可以以任意正整数长度切割，但不可以连接。现在要从这些绳子中切割出 m 条长度相同的绳段，求绳段的最大长度是多少。（第一、二空 2.5 分，其余 3 分）\n输入：第一行是一个不超过 100 的正整数 n，第二行是 n 个不超过106的正整数，表示每条绳子的长度，第三行是一个不超过108的正整数 m。\n输出：绳段的最大长度，若无法切割，输出 Failed。\n",
        "answer": "(1)count=count+len[i]或count+=len[i]\n(2)count<m或m>count\n(3)lbound<ubound\n(4)(lbound+ubound+1)/2或(lbound+ubound)/2+1\n(5)count+=len[i]/mid或count=count+len[i]/mid",
        "explain": "思路：二分题，定义区间[a,b]保证存在长度为a的切割方法，同时保证b是最大长度的上界。然后使用二分法，缩小上界提高下界，最终确定最大长度。问题关键在于可能解的区间连续，也就是假设存在长度为c的切割，则小于c的长度均有解。\n然后，对于二分判断函数，仅需要统计所以绳子能切割多少当前长度的数量。\n(1)count=count+len[i]或count+=len[i] 这里count为计算绳子总长度，也就是保证下面的lbound=1是否为下界。\n(2)count<m或m>count 总长度小于m就可以判断无解了，但是这里最关键的还是在于对[lbound, rbound]中lbound必须为解的理解。\n(3)lbound<ubound 判断区间是否为1\n(4)(lbound+ubound+1)/2或(lbound+ubound)/2+1 这里是否加1主要取决于后面语句lbound = mid;这里如果lbound == mid，那么区间将不减少，所以要保证lbound != mid\n(5)count+=len[i]/mid或count=count+len[i]/mid 累加统计",
        "code": "#include <iostream>\nusing namespace std;\nint n, m, i, lbound, ubound, mid, count;\nint len[100]; // 绳子长度\nint main()\n{\n    cin >> n;\n    count = 0;\n    for (i = 0; i < n; i++) {\n        cin >> len[i];\n        ____(1)____ ;\n    }\n    cin >> m;\n    if ( ____(2)____ ) {\n        cout << \"Failed\" << endl;\n        return 0;\n    }\n    lbound = 1;\n    ubound = 1000000;\n    while ( ____(3)____ ) {\n        mid = ____(4)____ ;\n        count = 0;\n        for (i = 0; i < n; i++)\n            ____(5)____ ;\n        if (count < m)\n            ubound = mid - 1;\n        else\n            lbound = mid;\n    }\n    cout << lbound << endl;\n    return 0;\n}"
    },
    {
        "id": "ws5",
        "title": "读入整数",
        "content": "请完善下面的程序，使得程序能够读入两个int 范围内的整数，\n并将这两个整数分别输出，每行一个。（第一、五空2.5 分，其余3 分）\n输入的整数之间和前后只会出现空格或者回车。输入数据保证合法。\n例如：\n输入：\n    123 -789\n输出：\n    123\n    -789",
        "answer": "(1) cin.get()\n(2) num=c-'0'或num=c-48\n(3) c>='0'&&c<='9'或c>=48&&c<=57\n(4) num=num\\*10+c-'0'或num=num\\*10+c-48\n(5) num=-num或return -num",
        "explain": "思路：处理字符串，将字符串转为整数。\n(1) cin.get() 判断输入直到第一个数字或者负号\n(2) num=c-'0'或num=c-48 将字符转为数字，只有减去'0'即可\n(3) c>='0'&&c<='9'或c>=48&&c<=57 判断是否为数字字符(0~9)\n(4) num=num\\*10+c-'0'或num=num\\*10+c-48 十进制数末尾填数字\n(5) num=-num或return -num 处理之前的负号",
        "code": "#include <iostream>\nusing namespace std;\nint readint()\n{\n    int num = 0; // 存储读取到的整数\n    int negative = 0; // 负数标识\n    char c; // 存储当前读取到的字符\n    c = cin.get();\n    while ((c < '0' || c > '9') && c != '-')\n        c = ___(1)___ ;\n    if (c == '-')\n        negative = 1;\n    else\n        ___(2)___ ;\n    c = cin.get();\n    while ( ___(3)___ ) {\n        ___(4)___ ;\n        c = cin.get();\n    }\n    if (negative == 1)\n        ___(5)___ ;\n    return num;\n}\nint main()\n{\n    int a, b;\n    a = readint();\n    b = readint();\n    cout << a << endl << b << endl;\n    return 0;\n}"
    },
    {
        "id": "ws6",
        "title": "郊游活动",
        "content": "有n 名同学参加学校组织的郊游活动，已知学校给这n 名同学\n的郊游总经费为A 元，与此同时第i 位同学自己携带了Mi 元。为了方便郊\n游，活动地点提供B(>=n)辆自行车供人租用，租用第j 辆自行车的价格为Cj\n元，每位同学可以使用自己携带的钱或者学校的郊游经费，为了方便账务管\n理，每位同学只能为自己租用自行车，且不会借钱给他人，他们想知道最多\n有多少位同学能够租用到自行车。（第四、五空2.5 分，其余3 分）\n    本题采用二分法。对于区间[l, r]，我们取中间点mid 并判断租用到自行\n车的人数能否达到mid。判断的过程是利用贪心算法实现的。",
        "answer": "(1) n-nn+1\n(2) M[i]<C[j] 或M[i]<=C[j]\n(3) count<=A\n(4) check(mid)\n(5) mid-1",
        "explain": "思路：二分法，对于区间[l,r],保证左边必成立，右边为上界。然后使用二分减小区间大小。对于这个问题，因为并不考虑同学顺序以及自行车顺序，可以将其顺序按照金额大小排序。对于二分判断函数，如判断mid, 使用贪心策略，我们可以让最富有的mid个人，借最便宜的mid辆自行车，只要郊游经费A元能够支付缺少的钱就可以通过判断。\n(1) n-nn+1 因为i表示第i富有的同学(下文中M[i]), 所以最富有nn个人的最小下标为n-nn+1.\n(2) M[i]<C[j] 或M[i]<=C[j]  表示同学借不起车，需要经费支持。\n(3) count<=A  判断缺少总金额是否小于A\n(4) check(mid) 判断mid是否成立\n(5) mid-1 为了保证每次循环减少区间，r != mid ",
        "code": "#include <iostream>\nusing namespace std;\n#define MAXN 1000000\nint n, B, A, M[MAXN], C[MAXN], l, r, ans, mid;\nbool check(int nn)\n{\n    int count = 0, i, j;\n    i = ____(1)____ ;\n    j = 1;\n    while (i <= n) {\n        if ( ____(2)____ )\n            count += C[j] - M[i];\n        i++;\n        j++;\n    }\n    return ____(3)____ ;\n}\nvoid sort(int a[], int l, int r)\n{\n    int i = l, j = r, x = a[(l + r) / 2], y;\n    while (i <= j) {\n        while (a[i] < x) i++;\n        while (a[j] > x) j--;\n        if (i <= j) {\n            y = a[i];\n            a[i] = a[j];\n            a[j] = y;\n            i++;\n            j--;\n        }\n    }\n    if (i < r) sort(a, i, r);\n    if (l < j) sort(a, l, j);\n}\nint main()\n{\n    int i;\n    cin >> n >> B >> A;\n    for (i = 1; i <= n; i++)\n        cin >> M[i];\n    for (i = 1; i <= B; i++)\n        cin >> C[i];\n    sort(M, 1, n);\n    sort(C, 1, B);\n    l = 0;\n    r = n;\n    while (l <= r) {\n        mid = (l + r) / 2;\n        if ( ____(4)____ ) {\n            ans = mid;\n            l = mid + 1;\n        } else\n            r = ____(5)____ ;\n    }\n    cout << ans << endl;\n    return 0;\n}"
    },
    {
        "id": "ws7",
        "title": "打印月历",
        "content": "输入月份m（1 <= m <= 12），按一定格式打印2015年第m月的月历。（第三、四空2.5分，其余3分）\n    例如，2015年1月的月历打印效果如下（第一列为周日）：\n\nS | M | T | W | T | F | S  \n --|--|--|--|--|--|--\n | | | | | 1 | 2 | 3\n4 | 5 | 6 | 7 | 8 | 9 | 10\n11 | 12 |13 |14 |15 |16 |17\n18| 19| 20| 21| 22| 23| 24\n25| 26| 27| 28| 29| 30| 31\n\n",
        "answer": "(1) offset=4\n(2) (offset+dayNum[i])%7\n(3) dayNum[m]\n(4) i\n(5) (offset+i)%7",
        "explain": "思路：字符串输出，模拟题。关键在于判断每个月1号是星期几。第二点就是在星期六的时候换行\n(1) offset=4 一月一日为星期四，下标为4，注意星期日下标为0\n(2) (offset+dayNum[i])%7  因为每周7天，计算下个月的offset只要知道模7余数。\n(3) dayNum[m] 循环枚举当前月的总天数\n(4) i 输出当前天数\n(5) (offset+i)%7 判断是否为周六，注意天数是从1开始的。",
        "code": "#include<iostream>\nusing namespace std;\nconst int dayNum[]={-1,31,28,31,30,31,30,31,31,30,31,30,31};\nint m,offset,i;\nint main() {\n\ncin>>m;\ncout<<\"S\\tM\\tT\\tW\\tT\\tF\\tS\"<<endl; \n____(1)______;\nfor (i=1; i<m; i++)\noffset = ____(2)_____;\nfor (i=0; i<offset; i++)\ncout<<'\\t';\nfor (i=1; i<=__(3)____; i++) {\ncout<<___(4)______;\nif (i==dayNum[m] || ___(5)____==0)\ncout<<endl;\nelse\ncout<<'\\t';\n}\nreturn 0;\n}"
    },
    {
        "id": "ws8",
        "title": "中位数",
        "content": "给定n（n为奇数且小于1000）个整数，整数的范围在0~m（0 < m < 2^31）之间，请使用二分法求这n个整数的中位数。所谓中位数，是指将这n个数排序之后，排在正中间的数。（第五空2分，其余3分）",
        "answer": "(1) lbound <rbound 或 rbound >lbound\n(2) count=0\n(3) x[i]>mid 或 mid<x[i]\n(4) count=count+1 或 count++ 或 ++count\n(5) rbound =mid",
        "explain": "思路：二分法。中位数的性质就是有n/2个数比它小，有n/2个数比它大(n为奇数)。因此这里二分统计多少个数比mid小。\n(1) lbound <rbound 或 rbound >lbound 判断区间是否小于2\n(2) count=0 从count>n/2知道count计算小于mid的个数\n(3) x[i]>mid 或 mid<x[i] 判断小于mid\n(4) count=count+1 或 count++ 或 ++count 计数加一\n(5) rbound =mid 因为这里count 可能等于n/2，所以不能减一",
        "code": "#include <iostream>\nusing namespace std;\nconst int MAXN = 1000;\nint n, i, lbound, rbound, mid, m, count;\nint x[MAXN];\nint main()\n{\n    cin >>n >> m;\n    for (i = 0; i < n; i++)\n        cin >> x[i];\n    lbound= 0;\n    rbound= m;\n    while (____(1)____ ) {\n        mid = (lbound+ rbound) / 2;\n        ____(2)____ ;\n        for (i = 0; i < n; i++)\n            if (____(3)____ )\n                ____(4)____ ;\n        if (count > n / 2)\n            lbound= mid + 1;\n        else\n            ____(5)____ ;\n    }\n    cout << rbound<< endl;\n    return 0;\n}\n"
    },
    {
        "id": "ws9",
        "title": "数字删除",
        "content": "下面程序的功能是将字符串中的数字字符删除后输出。请填空。(每空3分，共12分)",
        "answer": "(1) ||\n(2) j++ 或 j=j+1 或 ++j\n(3) j\n(4) s[i]",
        "explain": "思路：字符串处理，将字符串中的非数字字符保留，其余的删除。\n(1) || 判断是否为非数字字符\n(2) j++ 或 j=j+1 或 ++j 新的字符串长度自增\n(3) j  新字符串长度\n(4) s[i] 逐字输出",
        "code": "#include <iostream>\nusing namespace std;\nint delnum(char *s)\n{\n    int i, j;\n    j = 0;\n    for (i = 0; s[i] != '\\0'; i++)\n        if (s[i] < '0' ____(1)____ s[i] > '9') {\n            s[j] = s[i];\n            ____(2)____;\n        }\n    return ____(3)____;\n}\nconst int SIZE = 30;\nint main()\n{\n    char s[SIZE];\n    int len, i;\n    cin.getline(s, sizeof(s));\n    len = delnum(s);\n    for (i = 0; i < len; i++)\n        cout<< ____(4)____;\n    cout << endl;\n    return 0;\n}"
    },
    {
        "id": "ws10",
        "title": "最大子矩阵和",
        "content": "给出m 行n 列的整数矩阵，求最大的子矩阵和(子矩阵不能为空)。\n    输入第一行包含两个整数m 和n，即矩阵的行数和列数。之后m 行，每行n 个\n整数，描述整个矩阵。程序最终输出最大的子矩阵和。(最后一空4分，其余3分，共16分)",
        "answer": "(1) [1][1]\n(2) rowsum[i][0]=0\n(3) rowsum[i][j-1]+matrix[i][j]\n(4) area=0\n(5) rowsum[i][last]-rowsum[i][first-1]",
        "explain": "思路：题目好像有问题，这里使用rowsum计算每一个的前缀和，然后使用三重循环枚举每个子矩阵\n(1) [1][1] 结果初始化\n(2) rowsum[i][0]=0 rowsum初始化，根据m做题\n(3) rowsum[i][j-1]+matrix[i][j] 根据定义，rowsum相当于前个数加当前矩阵值\n(4) area=0 面积初始化\n(5) rowsum[i][last]-rowsum[i][first-1] 计算第i行[first, last]的元素和",
        "code": "#include <iostream>\nusing namespace std;\nconst int SIZE = 100;\nint matrix[SIZE + 1][SIZE + 1];\nint rowsum[SIZE + 1][SIZE + 1]; //rowsum[i][j]记录第i 行前j 个数的和\nint m, n, i, j, first, last, area, ans;\nint main()\n{\n    cin >> m >> n;\n    for (i = 1; i <= m; i++)\n        for (j = 1; j<= n; j++)\n            cin >>matrix[i][j];\n    ans = matrix____(1)____;\n    for (i = 1; i <= m; i++)\n        ____(2)____;\n    for (i = 1; i <= m; i++)\n        for (j = 1; j<= n; j++)\n            rowsum[i][j] = ____(3)____;\n    for (first = 1; first <= n; first++)\n        for (last = first; last <= n; last++) {\n            ____(4)____;\n            for (i = 1; i<= m; i++) {\n                area+=____(5)____;\n                if (area > ans)\n                    ans = area;\n                if (area < 0)\n                    area = 0;\n            }\n        }\n    cout << ans << endl;\n    return 0;\n}"
    },
    {
        "id": "ws11",
        "title": "序列重排",
        "content": "全局数组变量a定义如下：\nconst int SIZE = 100;\nint a[SIZE], n;\n它记录着一个长度为n的序列a[1], a[2], …, a[n]。\n    现在需要一个函数，以整数p (1 <= p <= n)为参数，实现如下功能：将序列a的前p个数与后n – p个数对调，且不改变这p个数（或n – p个数）之间的相对位置。例如，长度为5的序列1, 2, 3, 4, 5，当p = 2时重排结果为3, 4, 5, 1, 2。\n    有一种朴素的算法可以实现这一需求，其时间复杂度为O(n)、空间复杂度为O(n), 如swap1：\n    我们也可以用时间换空间，使用时间复杂度为O(n^2)、空间复杂度为O(1)的算法, 如swap2：",
        "answer": "(1) n - p + i\n(2) a[i]\n(3) n\n(4) i - p + 1\n(5) a[i - p]",
        "explain": "思路：前一部分相当于使用新的数组b, 存储a平移后的数组，后一部分相当于不断的挪动数组\n(1) n - p + i 这个需要计算a[i]对于的新数组位置，因为前p个数需要向后平移n-p，所以为n-p+i\n(2) a[i] 与(1)类似\n(3) n 复制b数组\n(4) i - p + 1 每一次复制p个数，所以为i-p+1\n(5) a[i - p] 将temp写入a数组",
        "code": "void swap1(int p)\n{\n    int i, j, b[SIZE];\n    for (i = 1; i <= p; i++) b[ ____(1)____ ] = a[i]; //（3分）\n    for (i = p + 1; i <= n; i++) b[i - p] = ____(2)____ ; //（3分） \n    for (i = 1; i <= ____(3)____ ; i++) //（2分）\n    a[i] = b[i];\n}\nvoid swap2(int p)\n{\n    int i, j, temp;\n    for (i = p + 1; i <= n; i++) {\n        temp = a[i];\n        for (j = i; j >= ____(4)____ ; j--) //（3分）\n            a[j] = a[j - 1];\n        ____(5)____ = temp; //（3分）\n    }\n}"
    },
    {
        "id": "ws12",
        "title": "二叉查找树",
        "content": "二叉查找树具有如下性质：每个节点的值都大于其左子树上所有节点的值、小于其右子树上所有节点的值。试判断一棵树是否为二叉查找树。\n    输入的第一行包含一个整数n，表示这棵树有n个顶点，编号分别为1, 2, …, n，其中编号为1的为根结点。之后的第i行有三个数value, left_child, right_child，分别表示该节点关键字的值、左子节点的编号、右子节点的编号；如果不存在左子节点或右子节点，则用0代替。输出1表示这棵树是二叉查找树，输出0则表示不是。",
        "answer": "(1) cur < upper_bound\n(2) a[root].right_child\n(3) cur\n(4) upper_bound\n(5) 1",
        "explain": "思路：树结构，递归。判断二叉查找树，设定上下界lower_bound, upper_bound, 如果当前为二叉查找树，则当前值cur, lower_bound < cur < upper_bound. 同时左子树、右子树也为二叉查找树，可以递归求解。\n(1) cur < upper_bound 判断上界\n(2) a[root].right_child 处理右子树\n(3) cur 下界为cur, 因为右子树不比cur小\n(4) upper_bound 上界与当前的一样\n(5) 1 题目中根节点为1",
        "code": "#include <iostream>\nusing namespace std;\nconst int SIZE = 100;\nconst int INFINITE = 1000000;\nstruct node {\n    int left_child, right_child, value;\n};\nnode a[SIZE];\nint is_bst(int root, int lower_bound, int upper_bound)\n{\n    int cur;\n    if (root == 0)\n        return 1;\n    cur = a[root].value;\n    if ((cur > lower_bound) && ( ____(1)____ ) && //（3分）\n        (is_bst(a[root].left_child, lower_bound, cur) == 1) &&\n        (is_bst( __(2)__, __(3)__, __(4)__ ) == 1))//（3分，3分，3分）\n        return 1;\n    return 0;\n}\nint main()\n{\n    int i, n;\n    cin>>n;\n    for (i = 1; i <= n; i++)\n        cin>>a[i].value>>a[i].left_child>> a[i].right_child;\n    cout<<is_bst(____(5)____ , -INFINITE, INFINITE)<<endl; //（2分）\n    return 0;\n}"
    },
    {
        "id": "ws13",
        "title": "坐标统计",
        "content": "输入n个整点在平面上的坐标。对于每个点，可以控制所有位于它左下方的点（即x、y坐标都比它小），它可以控制的点的数目称为“战斗力”。依次输出每个点的战斗力，最后输出战斗力最高的点的编号（如果若干个点的战斗力并列最高，输出其中最大的编号）。",
        "answer": "(1) 0\n(2) y[j]<y[i]\n(3) f[i]=f[i]+1; \n(4)f[i] >= max_f\n(5) ans=i",
        "explain": "思路：暴力枚举，也就是对每个点，根据定义，计算其战斗力。\n(1) 0 f默认初始化为0\n(2) y[j]<y[i] 判断是否为左下方\n(3) f[i]=f[i]+1;  战斗力加一\n(4) f[i] >= max_f 判断最大战斗力\n(5) ans=i 记录编号",
        "code": "#include <iostream>\nusing namespace std;\nconst int SIZE =100;\nint x[SIZE],y[SIZE],f[SIZE];\nint n,i,j,max_f,ans;\nint main()\n{\n    cin>>n;\n    for(i=1; i<=n; i++) cin>>x[i]>>y[i];\n    max_f=0;\n    for(i=1; i<=n; i++) {\n        f[i]= ____(1)____;\n        for(j=1; j<=n; j++) {\n            if(x[j]<x[i] && ____(2)____ )\n             ____(3)____  ;\n        }\n        if( ____(4)____  ) {\n            max_f=f[i];\n            ____(5)____ ;\n        }\n    }\n    for(i=1; i<=n; i++) cout<<f[i]<<endl;\n    cout<<ans<<endl;\n    return 0;\n}\n"
    },
    {
        "id": "ws14",
        "title": "排列数",
        "content": "输入两个正整数n，m（1<n<20,1<m<n），在1~n中任取m个数，按字典序从小到大输出所有这样的排列。例如： \n输入：3 2 \n输出：1 2\n      1 3 \n      2 1 \n      2 3\n      3 1 \n      3 2\n",
        "answer": "(1) false\n(2) used[data[i]]=flase\n(3) j\n(4) n\n(5) break",
        "explain": "思路：字典序，模拟题。具体思路为使用used数组表示每个数字是否被占用，data表示当前的排列。并且初始排列为1,2,3...(此排列必定字典序最小)。然后模拟搜索字典序次小的排列，直到没有排列为止。搜索步骤如下：\n1) 从最后一位开始，如果有比当前数大的未使用数，则替换当前数。然后后续数字从小到大排列(符合字典序)，寻找到一个新的排列，结束搜索。\n2)如果没有比当前数大的未使用数，则将当前数解锁，搜索前一个数。\n3)如果到第一个数还是没有则无更多排列，停止搜索。\n(1) false flag记录是否有新的排列\n(2) used[data[i]]=flase 将当前数解锁，因为不管上述什么情况都需要解锁当前数\n(3) j 替换当前数\n(4) n 后续数字从小到大排列，所以循环上界为n\n(5) break 这里为找到新的排列，所以结束循环。",
        "code": "#include <iostream>\n#include <cstring>\nusing namespace std;\nconst int SIZE =25;\nbool used[SIZE];\nint data[SIZE];\nint n,m,i,j,k;\nbool flag;\nint main()\n{\n    cin>>n>>m;\n    memset(used,false,sizeof(used));\n    for(i=1; i<=m; i++) {\n        data[i]=i;\n        used[i]=true;\n    }\n    flag=true;\n    while(flag) {\n        for(i=1; i<=m-1; i++) cout<<data[i]<<\" \";\n        cout<<data[m]<<endl;\n        flag=____(1)____;\n        for(i=m; i>=1; i--) {\n            ____(2)____ ;\n            for(j=data[i]+1; j<=n; j++)\n                if(!used[j]) {\n                    used[j]=true;\n                    data[i]=____(3)____ ;\n                    flag=true;\n                    break;\n                }\n            if(flag) {\n                for(k=i+1; k<=m; k++)\n                    for(j=1; j<=____(4)____; j++)\n                        if(!used[j]) {\n                            data[k]=j;\n                            used[j]=true;\n                            break;\n                        }\n                ____(5)____;\n            }\n        }\n    }\n    return 0;\n}\n"
    },
    {
        "id": "ws15",
        "title": "子矩阵",
        "content": "输入一个n1\\*m1的矩阵a，和n2\\*m2的矩阵b，问a中是否存在子矩阵和b相等。若存在，输出所有子矩阵左上角的坐标；若不存在输出“There is no answer”。",
        "answer": "(1) cin>>b[i][j] （或scanf(\"%d\", &b[i][j]或scanf(\"%d\", b[i] + j)）\n(2) m1 - m2 + 1\n(3) good = true (或 good = 1)\n(4) m2\n(5) haveAns = true(或haveAns = 1)",
        "explain": "思路：输入输出，使用循环枚举每一个a的左上角，然后判断该左上角的子矩阵是否与b相同。\n(1) cin>>b[i][j] （或scanf(\"%d\", &b[i][j]或scanf(\"%d\", b[i] + j)）输入矩阵b\n(2) m1 - m2 + 1  因为a子矩阵大小与b一样，所以上界为m1-m2+1\n(3) good = true (或 good = 1) good为两个矩阵相等的标志，技巧为循环中为good=false，所以这边只可能是true\n(4) m2 枚举b的每一个点，判断是否相等 \n(5) haveAns = true(或haveAns = 1)  haveAns是用来输出There ... ",
        "code": "#include <iostream>\nusing namespace std;\n\nconst int SIZE = 50;\nint n1, m1, n2, m2, a[SIZE][SIZE], b[SIZE][SIZE];\n\nint main()\n{\n    int i, j, k1, k2;\n    bool good, haveAns;\n    cin >> n1 >> m1;\n    for(i = 1; i <= n1; i++)\n        for(j = 1; j <= m1; j++)\n            cin >> a[i][j];\n    cin >> n2 >> m2;\n    for(i = 1; i <= n2; i++)\n        for(j = 1; j <= m2; j++)\n            ____(1)____;\n\n    haveAns = false;\n    for(i = 1; i <= n1 - n2 + 1; i++)\n        for(j = 1; j <= ____(2)____; j++) {\n            ____(3)____;\n            for(k1 = 1; k1 <= n2; k1++)\n                for(k2 = 1; k2 <= ____(4)____; k2++) {\n                    if(a[i + k1 - 1][j + k2 - 1] != b[k1][k2])\n                        good = false;\n                }\n            if(good) {\n                cout << i << ' ' << j << endl;\n                ____(5)____;\n            }\n        }\n\n    if(!haveAns)\n        cout << \"There is no answer\" << endl;\n    return 0;\n}\n"
    },
    {
        "id": "ws16",
        "title": "大整数开方",
        "content": "输入一个正整数n（1<=n＜10^100），试用二分法计算它的平方根的整数部分。",
        "answer": "(1) ans.num[i + j - 1]\n(2) ans.num[i] %= 10（或ans.num[i] = ans.num[i] % 10）\n(3) a.num[i] + b.num[i]\n(4) ans.num[i] % 2（或ans.num[i] & 1）\n(5) ans.len++（或 ++ans.len或ans.len += 1或ans.len = ans.len + 1）\n(6) a.len<b.len\n(7) '0'（或48）\n(8) times(middle, middle), target",
        "explain": "思路：二分，高精度乘法,加法。假设不考虑高精度，本问题就相当于找一个最大的a使得a\\*a<=n, 使用区间[1, 10^100], 二分判断mid是否符合条件，即可求解。\n而考虑高精度，需要将\n高精度乘法/加法相当于我们手动计算，需要考虑进位。\n(1) ans.num[i + j - 1] 每一位相乘需要考虑它的位置。\n(2) ans.num[i] %= 10（或ans.num[i] = ans.num[i] % 10） 相当于进位\n(3) a.num[i] + b.num[i] 将a,b对应位置相加\n(4) ans.num[i] % 2（或ans.num[i] & 1）将当前位置的除2的余数放到低一位数。\n(5) ans.len++（或 ++ans.len或ans.len += 1或ans.len = ans.len + 1）处理进位\n(6) a.len<b.len 首先判断位数大小\n(7) '0'（或48）字符转数字需要减去'0'\n(8) times(middle, middle), target 判断middle\\*middle <= n",
        "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nconst int SIZE = 200;\n\nstruct hugeint {\n    int len, num[SIZE];\n};\n//其中 len 表示大整数的位数；num[1]表示个位、num[2]表示十位，以此类推\n\nhugeint times(hugeint a, hugeint b)\n//计算大整数 a 和 b 的乘积\n{\n    int i, j;\n    hugeint ans;\n\n    memset(ans.num, 0, sizeof(ans.num));\n    for(i = 1; i <= a.len; i++)\n        for(j = 1; j <= b.len; j++)\n            _____(1)_____ +=  a.num[i]  * b.num[j];\n\n    for(i = 1; i <= a.len + b.len; i++) {\n        ans.num[i + 1] += ans.num[i] / 10;\n        _____(2)_____;\n    }\n\n    if(ans.num[a.len + b.len] > 0)\n        ans.len = a.len + b.len;\n    else\n        ans.len = a.len + b.len - 1;\n    return ans;\n}\n\nhugeint add(hugeint a, hugeint b)\n//计算大整数 a 和 b 的和\n{\n    int i;\n    hugeint ans;\n    memset(ans.num, 0, sizeof(ans.num));\n    if(a.len > b.len)\n        ans.len = a.len;\n    else\n        ans.len = b.len;\n    for(i = 1; i <= ans.len; i++) {\n        ans.num[i] += _____(3)_____;\n        ans.num[i + 1] += ans.num[i] / 10;\n        ans.num[i] %= 10;\n    }\n    if(ans.num[ans.len + 1] > 0)\n        ans.len++;\n    return ans;\n}\nhugeint average(hugeint a, hugeint b)\n//计算大整数 a 和 b 的平均数的整数部分\n{\n    int i;\n    hugeint ans;\n\n    ans = add(a, b);\n    for(i = ans.len; i >= 2; i--) {\n        ans.num[i - 1] += (_____(4)_____) * 10;\n        ans.num[i] /= 2;\n    }\n    ans.num[1] /= 2;\n    if(ans.num[ans.len] == 0)\n        ans.len--;\n    return ans;\n}\nhugeint plustwo(hugeint a)\n//计算大整数 a 加 2 后的结果\n{\n    int i;\n    hugeint ans;\n\n    ans = a;\n    ans.num[1] += 2;\n    i = 1;\n    while((i <= ans.len) && (ans.num[i] >= 10)) {\n        ans.num[i + 1] += ans.num[i] / 10;\n        ans.num[i] %= 10;\n        i++;\n    }\n    if(ans.num[ans.len + 1] > 0)\n        _____(5)_____;\n    return ans;\n}\nbool over(hugeint a, hugeint b)\n//若大整数 a>b 则返回 true，否则返回 false\n{\n    int i;\n\n    if(_____(6)_____)\n        return false;\n    if(a.len > b.len)\n        return true;\n    for(i = a.len; i >= 1; i--) {\n        if(a.num[i] < b.num[i])\n            return false;\n\n        if(a.num[i] > b.num[i])\n            return true;\n    }\n\n    return false;\n}\n\nint main()\n{\n    string s;\n    int i;\n    hugeint target, left, middle, right;\n\n    cin >> s;\n    memset(target.num, 0, sizeof(target.num));\n    target.len = s.length();\n    for(i = 1; i <= target.len; i++)\n        target.num[i] = s[target.len  - i] - _____(7)_____\n                        memset(left.num, 0, sizeof(left.num));\n    left.len = 1;\n    left.num[1] = 1;\n    right = target;\n    do {\n        middle = average(left, right);\n        if(over(_____(8)_____))\n            right = middle;\n        else\n            left = middle;\n    } while(!over(plustwo(left), right));\n\n    for(i = left.len; i >= 1; i--)\n        cout << left.num[i];\n    cout << endl;\n    return 0;\n}\n"
    },
    {
        "id": "ws17",
        "title": "哥德巴赫猜想",
        "content": "哥德巴赫猜想是指，任一大于2的偶数都可写成两个质数之和。迄今为止，这仍然是一个著名的世界难题，被誉为数学王冠上的明珠。试编写程序，验证任一大于2且不超过n的偶数都能写成两个质数之和。代码如下。若输入n为2010，则输出\\_\\_(5)\\_\\_时表示验证成功，即大于2且不超过2010的偶数都满足哥德巴赫猜想。",
        "answer": "(1) tmp=true\n(2) p[j]\n(3) p[r]=i\n(4) p[j]+p[k]\n(5) 1004",
        "explain": "思路：筛法求质数。质数定义可以换为不能被之前任何的质数整除。\n(1) tmp=true 根据下面的tmp=false填\n(2) p[j] 枚举当前数能否被已有的质数整除\n(3) p[r]=i 将当前数加入到质数表\n(4) p[j]+p[k] 枚举当前数是否为质数和\n(5) 1004 因为枚举上下限为[2,2010/2],共1005-2+1个数",
        "code": "#include<iostream>\nusing namespace std;\nint main()\n{\n    const int SIZE=1000;\n    int n,r,p[SIZE],i,j,k,ans;\n    bool tmp;\n    cin>>n;\n    r=1;\n    p[1]=2;\n    for(i=3; i<=n; i++) {\n        ____(1)____;\n        for(j=1; j<=r; j++)\n            if(i% ____(2)____ ==0) {\n                tmp=false;\n                break;\n            }\n        if(tmp) {\n            r++;\n            ____(3)____;\n        }\n    }\n    ans=0;\n    for(i=2; i<=n/2; i++) {\n        tmp=false;\n        for(j=1; j<=r; j++)\n            for(k=j; k<=r; k++)\n                if(i+i==____(4)____ ) {\n                    tmp=true;\n                    break;\n                }\n        if(tmp)\n            ans++;\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n"
    },
    {
        "id": "ws18",
        "title": "过河问题",
        "content": "在一个月黑风高的夜晚,有一群人在河的右岸,想通过唯一的一根独木桥走到河的左岸.在伸手不见五指的黑夜里,过桥时必须借照灯光来照明,不幸的是,他们只有一盏灯.另外,独木桥上最多能承受两个人同时经过,否则将会坍塌.每个人单独过独木桥都需要一定的时间,不同的人要的时间可能不同.两个人一起过独木桥时,由于只有一盏灯,所以需要的时间是较慢的那个人单独过桥所花费的时间.现在输入N(2<=N<1000)和这N个人单独过桥需要的时间,请计算总共最少需要多少时间,他们才能全部到达河左岸.\n    例如,有3个人甲、乙、丙,他们单独过桥的时间分别为1、2、4,则总共最少需要的时间为7.具体方法是:甲、乙一起过桥到河的左岸,甲单独回到河的右岸将灯带回,然后甲、丙在一起过桥到河的左岸,总时间为2+1+4=7.\n",
        "answer": "(1) num <= 2（或num < 3 或num = 2）\n(2) go(LEFT_TO_RIGHT) \n(3) pos[i] = =LEFT（或LEFT = pos[i]）\n(4) hour[i] + go(RIGHT_TO_LEFT)（或go(RIGHT_TO_LEFT) +hour[i]）\n(5) pos[i] = LEFT",
        "explain": "思路：深度搜索，递归。当右边的人数大于两个人，枚举任意一对人过河，按照这个情况搜索最优情况。假设go()函数实现功能在当前给定每个人位置(左或右)情况下，返回最短时间。\n对于go(RIGHT_TO_LEFT):\n1) 如果右边少于3人，直接过河，最短时间为两人的最大值。\n2) 如果右边不少于3人，枚举任何2人过河，最短时间为枚举过程的最短时间，时间计算为两人最大值+此情况下go(LEFT_TO_RIGHT)\n对于go(LEFT_TO_RIGHT):\n枚举任何一个人过河，最短时间为枚举过程的最短时间，时间计算为此人时间+此情况下go(RIGHT_TO_LEFT)\n(1) num <= 2（或num < 3 或num = 2）人数少于3人，可以直接过桥\n(2) go(LEFT_TO_RIGHT) 因为当前为RIGHT_TO_LEFT，所以需要反方向\n(3) pos[i] ==LEFT（或LEFT == pos[i]） 从左边中找人\n(4) hour[i] + go(RIGHT_TO_LEFT)（或go(RIGHT_TO_LEFT) +hour[i]）时间为当前人过河+然后加上这种情况下的最快过河方法。\n(5) pos[i] = LEFT 恢复此人位置",
        "code": "#include<iostream>\n#include<cstring>\nusing namespace std;\nconst int SIZE=100;\nconst int INFINITY = 10000;\nconst bool LEFT=true;\nconst bool RIGHT =false;\nconst bool LEFT_TO_RIGHT=true;\nconst bool RIGHT_TO_LEFT=false;\n\nint n,hour[SIZE];\nbool pos[SIZE];\n\nint max(int a,int b)\n{\n    if(a>b)\n        return a;\n    else\n        return b;\n}\nint go(bool stage)\n{\n    int i,j,num,tmp,ans;\n    if(stage==RIGHT_TO_LEFT) {\n        num=0;\n        ans=0;\n        for(i=1; i<=n; i++)\n            if(pos[i]==RIGHT) {\n                num++;\n                if( hour[i]>ans)\n                    ans=hour[i];\n            }\n        if( ____(1)____ )\n            return ans;\n        ans=INFINITY;\n        for(i=1; i<=n-1; i++)\n            if(pos[i]==RIGHT)\n                for(j=i+1; j<=n; j++)\n                    if(pos[j]==RIGHT) {\n                        pos[i]=LEFT;\n                        pos[j]=LEFT;\n                        tmp=max(hour[i],hour[j])+____(2)____ ;\n                        if(tmp<ans)\n                            ans=tmp;\n                        pos[i]=RIGHT;\n                        pos[j]=RIGHT;\n\n                    }\n        return ans;\n    }\n    if(stage==LEFT_TO_RIGHT) {\n        ans=INFINITY;\n        for(i=1; i<=n; i++)\n            if(____(3)____) {\n                pos[i]=RIGHT;\n                tmp=____(4)____ ;\n                if(tmp<ans)\n                    ans=tmp;\n                ____(5)____;\n            }\n        return ans;\n    }\n    return 0;\n}\n\nint main()\n{\n    int i;\n    cin>>n;\n    for(i=1; i<=n; i++) {\n        cin>>hour[i];\n        pos[i]=RIGHT;\n    }\n    cout<<go(RIGHT_TO_LEFT)<<endl;\n    return 0;\n}\n\n"
    },
    {
        "id": "ws19",
        "title": "最大连续子段和",
        "content": "给出一个数列（元素个数不多于100），数列元素均为负整数、正整数、0。请找出数列中的一个连续子数列，使得这个子数列中包含的所有元素之和最大，在和最大的前提下还要求该子数列包含的元素个数最多，并输出这个最大和以及该连续子数列中元素的个数。例如数列为4，-5，3，2，4时，输出9和3；数列为1 2 3 -5 0 7 8时，输出16和7。",
        "answer": "(1) 0\n(2)  tmp+a[i]==ans 或者 a[i]+tmp==ans 或者ans==a[i]+tmp等\n(3) <0\n(4) i\n(5) tmp+=a[i] 或者 tmp=tmp+a[i]",
        "explain": "思路：动态规划定义maxn[i]为以i为结尾的最大连续和，则很容易找到递推关系：maxn[i]=max{0,maxn[i-1] + a[i]}。而这里maxn是不用存储的，可以使用tmp表示当前maxn.\n(1) 0 beg记录当前子段的开始位置的前一个位置，初始没有所以置0,\n(2)  tmp+a[i]==ans 或者 a[i]+tmp==ans 或者ans==a[i]+tmp等 如果值相等，判断长度\n(3) <0 如果当前值小于0，那么还不如不加\n(4) i 可能通过考虑假设下一个数大于0，判断当前应为i, 而不是i-1\n(5) tmp+=a[i] 或者 tmp=tmp+a[i] 将当前数加入子段",
        "code": "#include <iostream>\nusing namespace std;\n\nint a[101];\nint n,i,ans,len,tmp,beg;\n\nint main()\n{\n    cin >> n;\n    for (i=1; i<=n; i++)\n        cin >> a[i];\n    tmp=0;\n    ans=0;\n    len=0;\n    beg=____(1)____ ;\n    for (i=1; i<=n; i++) {\n        if (tmp+a[i]>ans) {\n            ans=tmp+a[i];\n            len=i-beg;\n        } else if (____(2)____ &&i-beg>len)\n            len=i-beg;\n        if (tmp+a[i]____(3)____) {\n            beg=____(4)____;\n            tmp=0;\n        } else\n            ____(5)____ ;\n    }\n    cout << ans << \" \" << len << endl;\n    return 0;\n}\n"
    },
    {
        "id": "ws20",
        "title": "国王放置",
        "content": "在n\\*m的棋盘上放置k个国王，要求k个国王互相不攻击，有多少种不同的放置方法。假设国王放置在第(x,y)格，国王的攻击的区域是:(x-1,y-1), (x-1,y),(x-1,y+1),(x,y-1),(x,y+1),(x+1,y-1),(x+1,y),(x+1,y+1)。读入三个数n,m,k，输出答案。题目利用回溯法求解。棋盘行标号为0~n-1，列标号为0~m-1。",
        "answer": "(1) 0\n(2) hash[i][j]++ 或者 hash[i][j]= hash[i][j]+1 或者 ++hash[i][j]\n(3) work(x,y,tot+1)\n(4) hash[i][j]-- 或者 hash[i][j]= hash[i][j]-1 或者--hash[i][j]\n(5) work(0,0,0)",
        "explain": "思路：深度搜索。每一步枚举一个可以放置国王的位置，然后继续放下一个国王，当放置完最后一个国王，则搜索完毕。具体操作为使用work(x,y,tot)表示已放置tot个国王，下一国王搜索起点为(x,y)。因此：\n1)当tot==k，次数+1, 返回\n2)枚举(x,y)之后所有节点，如果可以放置，放置并记录冲突，继续放置下一个国王。记得返回要处理已填入的冲突。\n(1) 0 处理换行\n(2) hash[i][j]++ 或者 hash[i][j]= hash[i][j]+1 或者 ++hash[i][j] 冲突计数+1，不能够直接设置为1，因为可能有多个冲突。\n(3) work(x,y,tot+1) 继续放置下一个国王\n(4) hash[i][j]-- 或者 hash[i][j]= hash[i][j]-1 或者--hash[i][j] 消除当前国王的冲突\n(5) work(0,0,0) 初始位置为(0,0),已放入0个国王",
        "code": "#include <iostream>\nusing namespace std;\n\nint n,m,k,ans;\nint hash[5][5];\nvoid work(int x,int y,int tot)\n{\n    int i,j;\n    if (tot==k) {\n        ans++;\n        return;\n    }\n    do {\n        while (hash[x][y]) {\n            y++;\n            if (y==m) {\n                x++;\n                y=____(1)____;\n            }\n            if (x==n)\n                return;\n        }\n        for (i=x-1; i<=x+1; i++)\n            if (i>=0&&i<n)\n                for (j=y-1; j<=y+1; j++)\n                    if (j>=0&&j<m)\n                        ____(2)____;\n        ____(3)____;\n        for (i=x-1; i<=x+1; i++)\n            if (i>=0&&i<n)\n                for (j=y-1; j<=y+1; j++)\n                    if (j>=0&&j<m)\n                        ____(4)____;\n        y++;\n        if (y==m) {\n            x++;\n            y=0;\n        }\n        if (x==n)\n            return;\n    } while (1);\n}\nint main()\n{\n    cin >> n >> m >> k;\n    ans=0;\n    memset(hash,0,sizeof(hash));\n    ____(5)____;\n    cout << ans << endl;\n    return 0;\n}\n\n"
    }
]